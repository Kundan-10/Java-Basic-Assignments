What is the difference between ArrayList and Array 

                    ** ArrayList **
                    
 The ArrayList class implements the List interface. It uses a dynamic array to store the elements.
It dynamically increase and decrease in size.
ArrayList is the best choice if our frequent operation is retrieval.

Example:

    ArrayList<String> al = new ArrayList<>();
    
 In the above statement we have created an empty ArrayList class object which can hold multiple String objects.
The default initial capacity of the ArrayList is 10.
Once the ArrayList reaches to the maximum capacity, then internally a new ArrayList object will be created in the memory
automatically with following formula:

newCapacity = (currentCapacity * 3/2)+1;

import java.util.ArrayList;
class Main {
public static void main(String args[]) {
ArrayList<String> al = new ArrayList<>();
al.add("one");
al.add("two");
al.add("three");
al.add("one");//duplicate element
al.add(null);
al.add("four");
al.add(null); //duplicate null
System.out.println(al);
System.out.println(al.size());
}
}
Output:
[one, two, three, one, null, four, null]
7
Note: All the collection classes internally overrides the toString() method, so when
we print the object of the collection classes, it will print the elements inside
the [] square bracket, instead of printing the address.


                      ** Array **

                      
 An array in Java is a group of like-typed variables referred to by a common name. Arrays in Java work differently than they do in C/C++. Following are some important points about Java arrays. 

In Java, all arrays are dynamically allocated. (discussed below)

Arrays are stored in contagious memory [consecutive memory locations].

Since arrays are objects in Java, we can find their length using the object property length. This is different from C/C++, where we find length using sizeof.


A Java array variable can also be declared like other variables with [] after the data type.


The variables in the array are ordered, and each has an index beginning from 0.

Java array can also be used as a static field, a local variable, or a method parameter.

The size of an array must be specified by int or short value and not long.

The direct superclass of an array type is Object.

Every array type implements the interfaces Cloneable and java.io.Serializable.


 
This storage of arrays helps us in randomly accessing the elements of an array [Support Random Access].
The size of the array cannot be altered(once initialized).  However, an array reference can be made to point to another array.
An array can contain primitives (int, char, etc.) and object (or non-primitive) references of a class depending on the definition of the array. In the case of primitive data types, the actual values are stored in contiguous memory locations. In the case of class objects, the actual objects are stored in a heap segment.    



example :---


// both are valid declarations
int intArray[]; 
or int[] intArray; 

byte byteArray[];
short shortsArray[];
boolean booleanArray[];
long longArray[];
float floatArray[];
double doubleArray[];
char charArray[];

// an array of references to objects of
// the class MyClass (a class created by
// user)
MyClass myClassArray[]; 

Object[]  ao,        // array of Object
Collection[] ca;  // array of Collection
                     // of unknown type                  